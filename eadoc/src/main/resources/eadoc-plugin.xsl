<?xml version="1.0"?>

	<!--
		Generate xooki Plugin documentation from a ea:repreport xml file.
	-->
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ea="antlib:org.apache.easyant">

	<!--
		module organisation, provided from eadoc configuration parameters
	-->
	<xsl:param name="pluginOrganisation">org.apache.easyant.plugins</xsl:param>

	<!--
		xooki TOC level for the output HTML document. Default assumes TOC
		structure like Documentation > Reference > Plugins (level 2)
	-->
	<xsl:param name="tocLevel">2</xsl:param>

	<xsl:output method="html" indent="yes" omit-xml-declaration="yes"
		doctype-public="-//W3C//DTD HTML 4.01//EN" doctype-system="http://www.w3.org/TR/html4/strict.dtd" />

	<!--
		TODO: this model breaks if there is more than one revision element per
		module.
	-->
	
	<xsl:template match="/ivy-report/dependencies/module[1]/revision">
		<xsl:variable name="pluginName" select="../@name" />
		<xsl:variable name="pluginOrganisation" select="../@organisation"/>
		<xsl:variable name="moduleVersion" select="@name" />
		<xsl:variable name="moduleDescription" select="description" />
		<xsl:comment>
			Licensed to the Apache Software Foundation (ASF) under one
			or more contributor license agreements. See the NOTICE file
			distributed with this work for additional information
			regarding copyright ownership. The ASF licenses this file
			to you under the Apache License, Version 2.0 (the
			"License"); you may not use this file except in compliance
			with the License. You may obtain a copy of the License at

			http://www.apache.org/licenses/LICENSE-2.0

			Unless required by applicable law or agreed to in writing,
			software distributed under the License is distributed on an
			"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
			KIND, either express or implied. See the License for the
			specific language governing permissions and limitations
			under the License.
		</xsl:comment>
		<xsl:text>
		</xsl:text>
		<xsl:comment>
			<xsl:value-of select="$pluginName" />
			documentation autogenerated by EADoc
		</xsl:comment>
		<xsl:text>
		</xsl:text>
		<html>
			<head>
				<title>
					EasyAnt Plugin <xsl:value-of select="$pluginName" /><xsl:text> </xsl:text><xsl:value-of select="concat('v', $moduleVersion)" />
				</title>
				<script type="text/javascript">
					var xookiConfig = {level:<xsl:value-of select="$tocLevel" />};
				</script>
				<script type="text/javascript" src="../../xooki/xooki.js">
					<xsl:text></xsl:text>
				</script>
			</head>
			<body>
				<textarea id="xooki-source">

					<xsl:call-template name="outputHeader">
						<xsl:with-param name="pluginName" select="$pluginName" />
						<xsl:with-param name="pluginVersion" select="$moduleVersion" />
					</xsl:call-template>

					<xsl:if test="$moduleDescription">
						<h2>Overview</h2>
						<p>
							<xsl:copy-of select="$moduleDescription"/> 
						</p>
					</xsl:if>

					<div id="sample">
						<h2>Example</h2>
						You can use this plugin by adding the following code in your module.ivy (or module.ant) file
						<code type="xml">
							<ea:plugin>
								<xsl:attribute name="organisation">
									<xsl:value-of select="$pluginOrganisation"/>
								</xsl:attribute>
								<xsl:attribute name="module">
									<xsl:value-of select="$pluginName"/>
								</xsl:attribute>
								<xsl:attribute name="rev">
									<xsl:value-of select="$moduleVersion"/>
								</xsl:attribute>
								<xsl:attribute name="as">
									<xsl:value-of select="$pluginName"/>
								</xsl:attribute>
							</ea:plugin>
						</code>
						<div id="note">
							Note: By default targets provided by a plugin are prefixed by the plugin name (<xsl:value-of select="$pluginOrganisation"/>#<xsl:value-of select="$pluginName"/>).
							Most of the time the plugin name is quite long so easyant allows you to define an alias for the project names. This alias can be used in place of the complete project name. 
							You can define an alias for a plugin using 'as' attribute. 
						</div>
						<xsl:if test="$pluginOrganisation='org.apache.easyant.plugins'">
							<div id="note">Note: The organisation argument in <b>ea:plugin</b> tag is optional. If not specified easyant will use the default one (org.apache.easyant.plugins).</div>					
							Shorter form : 
							<code type="xml">
								<ea:build>
									<xsl:attribute name="module">
										<xsl:value-of select="$pluginName"/>
									</xsl:attribute>
									<xsl:attribute name="rev">
										<xsl:value-of select="$moduleVersion"/>
									</xsl:attribute>
									<xsl:attribute name="as">
										<xsl:value-of select="$pluginName"/>
									</xsl:attribute>
								</ea:build>
							</code>
						</xsl:if>
					</div>
					
					<xsl:call-template name="outputBuildPhases" />
					<xsl:call-template name="outputParameterTable" />
				</textarea>
				<script type="text/javascript">xooki.postProcess();</script>
			</body>
		</html>

	</xsl:template>

	<!-- Output plugin name and generate links to extended plugins -->
	<xsl:template name="outputHeader">
		<xsl:param name="pluginName" />
		<xsl:param name="pluginVersion" />
		<h1>
			Plugin <xsl:value-of select="$pluginName" /><xsl:text> </xsl:text><xsl:value-of select="concat('v', $pluginVersion)" />
		</h1>
		<xsl:if test="easyant/imports/import[@organisation = $pluginOrganisation]">
			<div class="parent-plugins">
				extends
				<xsl:for-each
					select="easyant/imports/import[@organisation = $pluginOrganisation]">
					<xsl:variable name="parentName" select="@name" />
					<xsl:element name="a">
						<xsl:attribute name="href"><xsl:value-of
							select="concat($parentName, '.html')" /></xsl:attribute>
						<xsl:value-of select="$parentName" />
					</xsl:element>
				</xsl:for-each>
			</div>
		</xsl:if>
		<hr />
	</xsl:template>

	<!--
		Generate an HTML table summarizing parameters used by the plugin
	-->
	<xsl:template name="outputParameterTable">
		<xsl:if test="easyant/properties/property">
			<h2>Parameters</h2>
			<p>The following property values can be changed to tune the behavior of this plugin.
				Required parameters must be defined upon import, or the build will fail.</p>
			<table class="sortable" id="plugin-parameters">
				<thead>
					<tr  class="header-row">
						<th>Parameter</th>
						<th>Required?</th>
						<th class="unsortable">Description</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="easyant/properties/property">
						<tr>
							<td>
								<xsl:value-of select="@name" />
							</td>
							<td>
								<xsl:choose>
									<xsl:when test="@required = 'true'">Yes</xsl:when>
									<xsl:otherwise>No</xsl:otherwise>
								</xsl:choose>
							</td>
							<td>
								<xsl:if test="@description">
									<xsl:value-of select="@description" /><br/>
								</xsl:if>
								<xsl:if test="@default">
									<span class="bold">Default value: </span><span class="defaultValue"><xsl:value-of select="@default" /></span>
								</xsl:if>
							</td>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</xsl:if>
	</xsl:template>

	<!--
		Generate a list describing what the plugin does during each build
		phase
	-->
	<xsl:template name="outputBuildPhases">
		<xsl:variable name="targets" select="easyant/targets" />

		<xsl:if test="easyant/phases/phase or $targets/target[@phase]">
			<xsl:if test="easyant/phases/phase">
				<h2>Build Phases</h2>
			
				<p>
					This plugin defines the following <a href="../phases.html">new build phases</a> :
				</p>
				<table class="sortable" id="plugin-phases">
					<thead>
						<tr class="header-row">
							<td>Phase</td>
							<td class="unsortable">Description</td>
						</tr>
					</thead>
					<tbody>
						<xsl:for-each select="easyant/phases/phase">
							<tr>
								<td>
									<xsl:value-of select="@name" />
								</td>
								<td>
									<xsl:value-of select="@description" />
								</td>
							</tr>
						</xsl:for-each>
					</tbody>
				</table>
			</xsl:if>

			<xsl:if test="$targets/target">
				<h2>Targets</h2>
				<p>This plugin contains the following targets:</p>
				<table class="sortable" id="plugin-targets">
					<thead>
						<tr  class="header-row">
							<th>Target</th>
							<th class="unsortable">Description</th>
							<th>Phase</th>
						</tr>
					</thead>
					<tbody>
						<xsl:for-each select="$targets/target">
							<tr class="target-row">
								<td class="target-name">
									<xsl:value-of select="@name" />
								</td>
								<td>
									<xsl:value-of select="@description" />
								</td>
								<td>
									<xsl:value-of select="@phase" />
								</td>
							</tr>
						</xsl:for-each>
					</tbody>
				</table>
				<p>
					Some targets are bound to existing <a href="../phases.html">build phase(s)</a>.
				</p>
			</xsl:if>
		</xsl:if>
	</xsl:template>
	<xsl:template match="text()"/>
</xsl:stylesheet>
