<!--
	Copyright 2008-2010 the EasyAnt project
	
	See the NOTICE file distributed with this work for additional information 
	regarding copyright ownership.
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->
<project name="org.apache.easyant.plugins#compile-test-scala"
	xmlns:ea="antlib:org.apache.easyant">

	<ea:core-version requiredrevision="[0.8,+]" />
	
	<ea:include mrid="org.apache.easyant.plugins#abstract-test;0.1" as=":abstract-test"/>
	
	<target name="-configure" phase="provision">
		<ea:findclasspath pathid="resolved.scala.classpath" organisation="org.scala-lang" module="scala-compiler" revision="2.7.7">
			<ea:project-dependency-strategy />
			<ea:environment-strategy env="SCALA_HOME"/>
			<ea:basic-configuration-strategy />
		</ea:findclasspath>
		<taskdef resource="scala/tools/ant/antlib.xml" classpathref="resolved.scala.classpath"/>
        <!-- when you specify classpath parameter to <scalac /> task it overrides class path 
        defined inside <taskdef /> rather then adds to it. So just add scala jars to your own class path.
        	source http://www.softwaresecretweapons.com/jspwiki/scalatoolsnscfatalerror-object-scala-not-found -->
        <ea:path pathid="compile.test.classpath" overwrite="prepend">
            <path refid="resolved.scala.classpath"/>
        </ea:path>

	</target>
	
	<macrodef name="compile-scala-tests">
		<attribute name="prefix"/>
		<sequential>
			<mkdir dir="${target.@{prefix}.classes}" />
	        <scalac  srcdir="${src.@{prefix}.java}"
	                destdir="${target.@{prefix}.classes}"
	                classpathref="compile.test.classpath"
	        		includes="${@{prefix}.compile.includes.pattern}"
	        	    excludes="${@{prefix}.compile.excludes.pattern}"
	        		scalacdebugging="${javac.debug.mode}">
	        </scalac>
		</sequential>
	</macrodef>
	
	<target name=":compile" depends="validate, compile, test-process-resources" if="has.src.test.java"
		phase="test-compile">
			<compile-scala-tests prefix="test"/>
	</target>
	
	<target name=":compile-integration" depends="validate, compile, test-process-resources" if="has.src.test.integration.java"
		phase="test-compile">
		<compile-scala-tests prefix="test.integration"/>
	</target>


</project>
